{
  "openapi": "3.1.0",
  "info": {
    "version": "1.0.0",
    "title": "Task app",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "description": "This is a documentation of task app"
  },
  "servers": [
    {
      "url": "http://localhost:3000"
    },
    {
      "url": "task-pro-backend-mcfs.onrender.com"
    }
  ],
  "tags": [
    {
      "name": "Task",
      "description": "Operations about users."
    },
    {
      "name": "Auth",
      "description": "Auth operations."
    },
    {
      "name": "Help",
      "description": "Send email to support."
    }
  ],
  "paths": {
    "/task": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "Get list of tasks",
        "operationId": "getTasks",
        "description": "Get list of tasks with this endpoint",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer"
            },
            "example": 1
          },
          {
            "in": "query",
            "name": "perPage",
            "schema": {
              "type": "integer",
              "example": 10
            }
          },
          {
            "in": "query",
            "name": "sortBy",
            "schema": {
              "type": "string",
              "example": "age"
            },
            "description": "All task's fields can be mentioned. Default value - _id"
          },
          {
            "in": "query",
            "name": "sortOrder",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "example": "asc"
            }
          },
          {
            "in": "query",
            "name": "minAvgMark",
            "schema": {
              "type": "number",
              "example": 4
            }
          },
          {
            "in": "query",
            "name": "maxAvgMark",
            "schema": {
              "type": "number",
              "example": 10
            }
          },
          {
            "in": "query",
            "name": "minAge",
            "schema": {
              "type": "number",
              "example": 10
            }
          },
          {
            "in": "query",
            "name": "maxAge",
            "schema": {
              "type": "number",
              "example": 16
            }
          },
          {
            "in": "query",
            "name": "gender",
            "schema": {
              "type": "string",
              "enum": [
                "male",
                "female",
                "other"
              ],
              "example": "male"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found tasks!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully found tasks!"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "data",
                        "page",
                        "perPage",
                        "totalItems",
                        "totalPages",
                        "hasNextPage",
                        "hasPreviousPage"
                      ],
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/task"
                          }
                        },
                        "page": {
                          "type": "number",
                          "example": 2
                        },
                        "perPage": {
                          "type": "number",
                          "example": 4
                        },
                        "totalItems": {
                          "type": "number",
                          "example": 4
                        },
                        "totalPages": {
                          "type": "number",
                          "example": 4
                        },
                        "hasNextPage": {
                          "type": "boolean",
                          "example": false
                        },
                        "hasPreviousPage": {
                          "type": "boolean",
                          "example": true
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "Tasks"
        ],
        "summary": "Create task",
        "operationId": "createTask",
        "description": "Create a task with payload",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "title",
                  "description",
                  "dueDate",
                  "priority",
                  "assignedTo"
                ],
                "properties": {
                  "title": {
                    "description": "Task's title",
                    "type": "string",
                    "example": "Complete project report"
                  },
                  "description": {
                    "description": "Task's description",
                    "type": "string",
                    "example": "Write and submit the project report by end of the week."
                  },
                  "dueDate": {
                    "description": "Task's due date",
                    "type": "string",
                    "format": "date",
                    "example": "2024-10-31"
                  },
                  "priority": {
                    "description": "Task's priority level",
                    "type": "string",
                    "enum": [
                      "low",
                      "medium",
                      "high"
                    ]
                  },
                  "status": {
                    "description": "Current status of the task",
                    "type": "string",
                    "enum": [
                      "not started",
                      "in progress",
                      "completed"
                    ]
                  },
                  "assignedTo": {
                    "description": "ID of the user the task is assigned to",
                    "type": "string",
                    "example": "65e4decdd286b30065d54af9"
                  },
                  "createdAt": {
                    "description": "Date when the task was created",
                    "type": "string",
                    "format": "date-time",
                    "example": "2024-10-25T12:00:00Z"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Creates a task",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully created a task!"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/task"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/task/{id}": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "Get task by id",
        "operationId": "getTask",
        "description": "Get task by id",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "65ca67e7ae7f10c88b598384"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get task by id",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully found task with id 65ca67e7ae7f10c88b598384!"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/task"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "Tasks"
        ],
        "summary": "Update task",
        "operationId": "updateTask",
        "description": "Update task by ID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "65ca67e7ae7f10c88b598384"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "description": "Task's title",
                    "type": "string",
                    "example": "Complete report"
                  },
                  "description": {
                    "description": "Task's description",
                    "type": "string",
                    "example": "Prepare and submit the financial report by the end of the week."
                  },
                  "dueDate": {
                    "description": "Task's due date",
                    "type": "string",
                    "format": "date",
                    "example": "2024-11-01"
                  },
                  "priority": {
                    "description": "Priority level of the task",
                    "type": "string",
                    "enum": [
                      "low",
                      "medium",
                      "high"
                    ]
                  },
                  "isCompleted": {
                    "description": "Status of task completion",
                    "type": "boolean",
                    "example": false
                  },
                  "attachment": {
                    "type": "string",
                    "format": "binary",
                    "description": "File attachment for the task",
                    "example": "https://res.cloudinary.com/dsf7ryper/image/upload/v1724619697/file.pdf"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update task by ID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully updated task"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/task"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Tasks"
        ],
        "summary": "Delete task by ID",
        "operationId": "deleteTask",
        "description": "Delete a task by its ID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "66cb82062c60d9a89bb75c56"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted task, no content returned"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/register": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Register an user",
        "description": "Register an user",
        "operationId": "registerUser",
        "security": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "email",
                  "password"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 3,
                    "maxLength": 30,
                    "example": "John"
                  },
                  "email": {
                    "type": "string",
                    "example": "john@gmail.com"
                  },
                  "password": {
                    "type": "string",
                    "minLength": 6,
                    "example": "examplepwd"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Registered an user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully registered an user"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "_id",
                        "name",
                        "email"
                      ],
                      "properties": {
                        "_id": {
                          "description": "User's id",
                          "type": "string",
                          "example": "671264281222679af8484a00"
                        },
                        "name": {
                          "description": "User's name",
                          "type": "string",
                          "example": "John"
                        },
                        "email": {
                          "description": "User's email",
                          "type": "string",
                          "example": "john@gmail.com"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "409": {
            "$ref": "#/components/responses/409"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Login an user",
        "description": "Login an user and create session",
        "operationId": "loginUser",
        "security": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "john@gmail.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "examplepwd"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully loged in an user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully loged in an user"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "accessToken"
                      ],
                      "properties": {
                        "accessToken": {
                          "type": "string",
                          "example": "dx6a2NQiGAUSKOQ3A3WedvoPdKc+ghpuE4UAsMv9"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "description": "Not Found Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "NotFoundError"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "message"
                      ],
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "User not found"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Logout user",
        "description": "Logs out the user by deleting the session identified by sessionId cookie ",
        "operationId": "logoutUser",
        "security": [],
        "parameters": [
          {
            "in": "cookie",
            "name": "sessionId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Session ID stored in cookies, used to identify and delete the session."
          }
        ],
        "responses": {
          "204": {
            "description": "User successfully loged out, no content returned"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/users/current": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get current user",
        "operationId": "getCurrentUser",
        "description": "Get the currently authenticated user information.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Get current user information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully retrieved user information!",
                      "data": {
                        "$ref": "../../../components/schemas/users.yaml"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/users/theme": {
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Update user theme",
        "operationId": "patchUserTheme",
        "description": "Update the theme preference for the currently authenticated user.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "theme": {
                    "description": "Preferred theme of the user",
                    "type": "string",
                    "enum": [
                      "dark",
                      "light",
                      "violet"
                    ],
                    "example": "light"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated theme preference",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully updated theme preference!"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "theme": {
                          "type": "string",
                          "example": "dark"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/users/edit": {
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Update current user",
        "operationId": "patchCurrentUser",
        "description": "Update the currently authenticated user information.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "User's name",
                    "example": "John Doe"
                  },
                  "email": {
                    "type": "string",
                    "description": "User's email",
                    "example": "john.doe@example.com"
                  },
                  "password": {
                    "type": "string",
                    "description": "\"User's password (may contain Latin letters, numbers, and symbols;\n- signs can be in different cases; \n- can contain from 8 to 64 characters (inclusive);\n- cannot contain spaces)\"\n",
                    "example": "password123"
                  },
                  "photoUrl": {
                    "description": "Link to user's photo",
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated user information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully updated user information!"
                    },
                    "data": {
                      "$ref": "#/components/schemas/users"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/help": {
      "post": {
        "tags": [
          "Help"
        ],
        "summary": "Send email to support",
        "operationId": "sendEmail",
        "description": "Send email to support and copy of email to user",
        "security": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "userMessage"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "john@gmail.com"
                  },
                  "userMessage": {
                    "type": "string",
                    "minLength": 2,
                    "maxLength": 300,
                    "example": "I need a help"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Email sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Your request for help has been sent successfully"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "NotFoundError"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "message"
                      ],
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "User not found"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "message"
                      ],
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Failed to send the email, please try again later."
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "schemas": {
      "task": {
        "type": "object",
        "required": [
          "_id",
          "title",
          "description",
          "dueDate",
          "priority",
          "status"
        ],
        "properties": {
          "_id": {
            "description": "Task's id",
            "type": "string",
            "example": "65e4decdd286b30065d54af9"
          },
          "title": {
            "description": "Task's title",
            "type": "string",
            "example": "Complete project report"
          },
          "description": {
            "description": "Task's description",
            "type": "string",
            "example": "Write and submit the project report by end of the week."
          },
          "dueDate": {
            "description": "Task's due date",
            "type": "string",
            "format": "date",
            "example": "2024-10-31"
          },
          "priority": {
            "description": "Task's priority level",
            "type": "string",
            "enum": [
              "low",
              "medium",
              "high"
            ]
          },
          "status": {
            "description": "Current status of the task",
            "type": "string",
            "enum": [
              "not started",
              "in progress",
              "completed"
            ]
          },
          "assignedTo": {
            "description": "ID of the user the task is assigned to",
            "type": "string",
            "example": "65e4decdd286b30065d54af9"
          },
          "createdAt": {
            "description": "Date when the task was created",
            "type": "string",
            "format": "date-time",
            "example": "2024-10-25T12:00:00Z"
          }
        }
      },
      "users": {
        "type": "object",
        "properties": {
          "name": {
            "description": "User's name",
            "type": "string",
            "example": "John Doe"
          },
          "email": {
            "description": "User's email",
            "type": "string",
            "example": "john.doe@example.com"
          },
          "password": {
            "description": "User's password (required may contain Latin letters, numbers and symbols; - signs can be in different registers; - can contain from 8 to 64 characters (inclusive); - cannot contain spaces);",
            "type": "string",
            "example": "P@ssw0rd"
          },
          "photoUrl": {
            "description": "Link to user's avatar",
            "oneOf": [
              {
                "type": "string",
                "format": "binary",
                "example": "https://res.cloudinary.com/uqwgdu/image/upload/image.png"
              },
              {
                "type": "null",
                "example": null
              }
            ]
          },
          "theme": {
            "description": "theme of interface",
            "type": "string",
            "enum": [
              "dark",
              "light",
              "violet"
            ],
            "example": "light"
          }
        }
      }
    },
    "responses": {
      "401": {
        "description": "Unauthorized error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 401
                },
                "message": {
                  "type": "string",
                  "example": "UnauthorizedError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Access token expired"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "404": {
        "description": "Not Found Error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 404
                },
                "message": {
                  "type": "string",
                  "example": "NotFoundError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Task not found"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "409": {
        "description": "Conflict error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 409
                },
                "message": {
                  "type": "string",
                  "example": "Conflict error"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Email in use"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "500": {
        "description": "Server Error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 500
                },
                "message": {
                  "type": "string",
                  "example": "Internal Server Error"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Something went wrong"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}